# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_data.transforms.ipynb (unless otherwise specified).

__all__ = ['java_comment_remover', 'line_randomizer', 'code_token_randomizer', 'transform_df']

# Cell
import re

import pandas as pd

from random import shuffle
from typing import Callable, Optional

# Cell
def java_comment_remover(mthd: str) -> str:
    """
    Remove all comments from a given java method. Code from https://stackoverflow.com/a/241506/5768407.

    :param mthd: the method to have its comments removed
    :returns: returns the method with its comments removed
    """

    def replacer(match):
        s = match.group(0)
        if s.startswith("/"):
            return " "  # note: a space and not an empty string
        else:
            return s

    pattern = re.compile(
        r'//.*?$|</>\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
        re.DOTALL | re.MULTILINE,
    )
    return re.sub(pattern, replacer, mthd)

# Cell
def line_randomizer(mthd: str) -> str:
    """
    Randomize the lines in a given method.

    :param mthd: the method to have its lines randomized
    :returns: returns the method with its lines randomized
    """
    mthd = mthd.split("\n")
    shuffle(mthd)

    return "\n".join(mthd)


def code_token_randomizer(mthd: str) -> str:
    """
    Randomize the tokens in a given method.

    :param mthd: the method to have its code tokens randomized
    :returns: returns the method with its code tokens randomized
    """
    mthd = mthd.split(" ")
    shuffle(mthd)

    return " ".join(mthd)

# Cell
def transform_df(
    df: pd.DataFrame, transform: Callable, n: Optional[int] = None
) -> pd.DataFrame:
    """
    Transform the given pandas dataframe using the given transformation.

    :param df: the dataframe containing each method to be transformed
    :param transform: the transformation that will be applied to each method in the dataframe
    :param n: the number of methods to evaluate. If none, the entire dataframe will be used
    :returns: returns a modified dataframe with the methods transformed
    """
    if n is None:
        n = len(df)

    df = df.iloc[:n].copy()
    df.code = df.code.apply(transform)

    return df